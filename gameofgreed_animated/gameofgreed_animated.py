#Game of Greed - Animated Version using Python Turtle
import random
import turtle

#initializes variables
isgameover = True
firstgame = True
personalhigh = 0
rulesshown = False
roll = None

def initializeBoard():
  '''initializes the boardscreen and turtle drawing objects'''
  global screen
  global pen
  global personalpen
  global gamescorepen
  global roundscorepen
  global tokenpen
  global rollpen
  
  screen = turtle.Screen()
  screen.setup(500, 500)
  
  pen = turtle.Turtle()
  pen.penup()
  pen.ht()
  pen.speed(0)
  
  personalpen = turtle.Turtle()
  personalpen.penup()
  personalpen.ht()
  personalpen.speed(0)

  gamescorepen = turtle.Turtle()
  gamescorepen.penup()
  gamescorepen.ht()
  gamescorepen.speed(0)

  roundscorepen = turtle.Turtle()
  roundscorepen.penup()
  roundscorepen.ht()
  roundscorepen.speed(0)

  tokenpen = turtle.Turtle()
  tokenpen.penup()
  tokenpen.ht()
  tokenpen.speed(0)
  
  rollpen = turtle.Turtle()
  rollpen.penup()
  rollpen.ht()
  rollpen.speed(0)

  showGameScreen()

def showGameScreen():
  '''displays the main game screen'''
  global rulesshown

  rulesshown = False
  screen.bgpic("background.gif")
  
  
def updateHighScore():
  '''updates the all time high score'''
  pen.clear()
  pen.setpos(140, 198)
  pen.write(str(highscore), font=("Verdana", 20, "normal"))

def updatePersonalHigh():
  '''updates the personal high score'''
  personalpen.clear()
  personalpen.setpos(135, 155)
  personalpen.write(str(personalhigh), font=("Verdana", 20, "normal"))

def updateGameScore():
  '''updates the game score'''
  gamescorepen.clear()
  gamescorepen.setpos(135, 42)
  gamescorepen.write(str(overallscore), font=("Verdana", 20, "normal"))

def updateRoundScore():
  '''updates the round score'''
  roundscorepen.clear()
  roundscorepen.setpos(135, -50)
  roundscorepen.write(str(currentscore), font=("Verdana", 20, "normal"))

def updateTokens():
  '''updates the token count'''
  tokenpen.clear()
  tokenpen.setpos(135, -140)
  tokenpen.write(str(tokens), font=("Verdana", 20, "normal"))

def updateRoll():
  '''updates the most recent roll'''
  if roll != None:
    rollpen.clear()
    rollpen.setpos(-35, 70)
    rollpen.write(str(roll), font=("Verdana", 20, "normal"))
  
  
def newGame():
  '''initializes new game variables'''
  global overallscore
  global isgameover
  global tokens
  global highscore
  global firstgame

  file = open("gameofgreedhighscore.txt", "r")
  #assert file.readline().strip("\n") == "-----------DO NOT EDIT THIS FILE-----------"
  file.readline()
  file.read(12)
  highscore = int(file.readline().strip("\n"))
  
  overallscore = 0
  isgameover = False
  tokens = 3
  showGameScreen()
  newRound()
  updateHighScore()
  updatePersonalHigh()

  if firstgame:
    firstgame = False

def rollDie():
   '''rolls a fair, six-sided die'''
   return random.randrange(1, 7)

def newRound():
   '''starts a new round upon inserting token'''
   global currentscore
   global tokens

   tokens -= 1
   currentscore = rollDie()
   currentscore += rollDie()

   updateTokens()
   updateRoundScore()
   updateGameScore()

def rollAgain():
   '''User chooses to be greedy'''
   global overallscore
   global currentscore
   global isgameover
   global roll
   
   roll = rollDie()
   updateRoll()
   
   if roll == 2:
     if tokens == 0:
       gameOver()
     else:
       newRound()
   else:
     currentscore += roll
     updateRoundScore()

def gameOver():
  '''Ending game state'''
  global isgameover
  global personalhigh
  
  isgameover = True
  if overallscore > highscore:
    file = open("gameofgreedhighscore.txt", "w")
    file.write("-----------DO NOT EDIT THIS FILE-----------\n")
    file.write("High Score: " + str(overallscore) + "\n")
    file.close()

  if overallscore > personalhigh:
    personalhigh = overallscore
    
  screen.bgpic("gameover.gif")
  roundscorepen.clear()
  gamescorepen.clear()
  tokenpen.clear()
  rollpen.clear()
  
  gamescorepen.setpos(100, -170)
  gamescorepen.write(str(overallscore), font=("Verdana", 20, "normal"))
  
def showRules():
  '''displays rule page'''
  global rulesshown

  rulesshown = True
  
  screen.bgpic("rules.gif")
  roundscorepen.clear()
  gamescorepen.clear()
  tokenpen.clear()
  rollpen.clear()
  return

def checkAction(x, y):
  '''on click activities'''
  global overallscore
  global currentscore
  global rulesshown
  
  if x > -245 and x < -125 and y > 135 and y < 245 and isgameover:
    newGame()
  elif not isgameover or firstgame:
    if x > 50 and x < 245 and y > -245 and y < -165:
      if rulesshown:
        showGameScreen()
        rulesshown = False
        if not firstgame:
          updateRoundScore()
          updateGameScore()
          updateRoll()
          updateTokens()
      else:
        showRules()
    if x > -245 and x < -105 and y > -235 and y < -185 and not firstgame:
      rollAgain()
    elif x > -100 and x < 45 and y > -235 and y < -185 and not firstgame:
      overallscore += currentscore
      if tokens == 0:
        gameOver()
      else:
        newRound()

#function calls to start the game and allow mouse clicks
initializeBoard()
screen.onclick(checkAction)

